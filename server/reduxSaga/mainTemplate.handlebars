// This file is generated
/* eslint-disable max-len */

import { takeEvery, takeLatest } from 'redux-saga';
import { call, put } from 'redux-saga/effects';
import * as request from 'superagent';

function api({{#if operation.parameters.length}}{
  {{{parameterList operation lines=true initUndefined=true indent=2}}} } = {}{{/if}}) {

  const queryData = Object.assign({{#if operation.parameters.length}}
    {{{ createObjectList operation indent=4}}}
  {{else}}{}{{/if}});

  return request
    .get(`{{ createPath operation }}`)
    .query(queryData);
}

const actionTypes = {
  {{name}}_{{toLowerCase operation.method}}: '{{name}}/{{toLowerCase operation.method}}',
  {{name}}_doing: '{{name}}/doing',
  {{name}}_success: '{{name}}/success',
  {{name}}_failure: '{{name}}/failure',
};

const actions = {
  /**
   * {{operation.description}}
   {{#each operation.parameters}}
   {{{jsdocParameter this}}}
   {{/each}}
   */
  {{name}}_{{toLowerCase operation.method}}: ({{#if operation.parameters.length}}{
    {{{parameterList operation lines=true initUndefined=true indent=4}}} } = {}{{/if}}) => ({
    type: actionTypes.{{name}}_{{toLowerCase operation.method}},
    payload: {
      {{parameterList operation lines=true indent=6}}
    },
  }),
  {{name}}_doing: () => ({
    type: actionTypes.{{name}}_doing,
  }),
  {{name}}_success: (result) => ({
    type: actionTypes.{{name}}_success,
    payload: result,
  }),
  {{name}}_failure: (err) => ({
    type: actionTypes.{{name}}_failure,
    payload: err,
    error: true,
  }),
};

function* saga(action) {
  try {
    yield put(actions.{{name}}_doing());
    const { body } = yield call(api, action.payload);
    yield put(actions.{{name}}_success(body));
  } catch (error) {
    yield put(actions.{{name}}_failure(error));
  }
}

/**
 * Start this saga if you'd prefer to process every action
 */
function* takeEverySaga() {
  yield* takeEvery(actionTypes.{{name}}_{{toLowerCase operation.method}}, saga);
}

/**
 * Start this saga if you'd prefer to process only the latest action
 */
function* takeLatestSaga() {
  yield* takeLatest(actionTypes.{{name}}_{{toLowerCase operation.method}}, saga);
}

export {
  actions,
  actionTypes,
  api,
  saga,
  takeEverySaga,
  takeLatestSaga,
};
