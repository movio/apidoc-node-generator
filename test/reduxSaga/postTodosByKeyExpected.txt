// This file is generated
/* eslint-disable max-len */

import { takeEvery, takeLatest } from 'redux-saga';
import { call, put } from 'redux-saga/effects';
import * as request from 'superagent';

function api({
  __body = undefined,
  key } = {}) {

  const queryData = Object.assign(
    __body ? { __body } : {},
    key ? { key } : {}
  );

  return request
    .get(`todos`)
    .query(queryData);
}

const actionTypes = {
  postTodos_post: 'postTodos/post',
  postTodos_doing: 'postTodos/doing',
  postTodos_success: 'postTodos/success',
  postTodos_failure: 'postTodos/failure',
};

const actions = {
  /**
   * 
   * @param {string} key - 
   */
  postTodos_post: ({
    __body = undefined,
    key } = {}) => ({
    type: actionTypes.postTodos_post,
    payload: {
      __body,
      key
    },
  }),
  postTodos_doing: () => ({
    type: actionTypes.postTodos_doing,
  }),
  postTodos_success: (result) => ({
    type: actionTypes.postTodos_success,
    payload: result,
  }),
  postTodos_failure: (err) => ({
    type: actionTypes.postTodos_failure,
    payload: err,
    error: true,
  }),
};

function* saga(action) {
  try {
    yield put(actions.postTodos_doing());
    const { body } = yield call(api, action.payload);
    yield put(actions.postTodos_success(body));
  } catch (error) {
    yield put(actions.postTodos_failure(error));
  }
}

/**
 * Start this saga if you'd prefer to process every action
 */
function* takeEverySaga() {
  yield* takeEvery(actionTypes.postTodos_post, saga);
}

/**
 * Start this saga if you'd prefer to process only the latest action
 */
function* takeLatestSaga() {
  yield* takeLatest(actionTypes.postTodos_post, saga);
}

export {
  actions,
  actionTypes,
  api,
  saga,
  takeEverySaga,
  takeLatestSaga,
};
