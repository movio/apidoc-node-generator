// This file is generated

import { takeEvery, takeLatest } from 'redux-saga';
import { call, put } from 'redux-saga/effects';

function api(key1, key2, firstName, lastName) {
  return new Promise((resolve) => {
    const response = {
      todos: [
        {
          text: 'Use Redux',
          completed: false,
        },
      ],
    };
    resolve(response);
  });
}

const actionTypes = {
  getTodosByKey1AndKey2_get: 'getTodosByKey1AndKey2/get',
  getTodosByKey1AndKey2_doing: 'getTodosByKey1AndKey2/doing',
  getTodosByKey1AndKey2_success: 'getTodosByKey1AndKey2/success',
  getTodosByKey1AndKey2_failure: 'getTodosByKey1AndKey2/failure',
};

const actions = {
  /**
   * All the things
   * @param {string} key1 - the first key
   * @param {integer} key2 - the second key
   * @param {string} firstName - first comes before last
   * @param {string=} lastName - last name (Optional)
   */
  getTodosByKey1AndKey2_get: (key1, key2, firstName, lastName) => ({
    type: actionTypes.getTodosByKey1AndKey2_get,
    payload: {
      key1,
      key2,
      firstName,
      lastName
    },
  }),
  getTodosByKey1AndKey2_doing: () => ({
    type: actionTypes.getTodosByKey1AndKey2_doing,
  }),
  getTodosByKey1AndKey2_success: (todos) => ({
    type: actionTypes.getTodosByKey1AndKey2_success,
    payload: todos,
  }),
  getTodosByKey1AndKey2_failure: (err) => ({
    type: actionTypes.getTodosByKey1AndKey2_failure,
    payload: err,
    error: true,
  }),
};

function* saga(action) {
  const { key1, key2, firstName, lastName } = action.payload;
  try {
    yield put(actions.getTodosByKey1AndKey2_doing());
    const { response } = yield call(api, key1, key2, firstName, lastName);
    yield put(actions.getTodosByKey1AndKey2_success(response));
  } catch (error) {
    yield put(actions.getTodosByKey1AndKey2_failure(error));
  }
}

/**
 * Start this saga if you'd prefer to process every action
 */
function* takeEverySaga() {
  yield* takeEvery(actionTypes.getTodosByKey1AndKey2_get, saga);
}

/**
 * Start this saga if you'd prefer to process only the latest action
 */
function* takeLatestSaga() {
  yield* takeLatest(actionTypes.getTodosByKey1AndKey2_get, saga);
}

export {
  actions,
  actionTypes,
  api,
  saga,
  takeEverySaga,
  takeLatestSaga,
};
