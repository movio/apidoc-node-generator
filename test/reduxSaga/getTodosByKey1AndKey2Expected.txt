// This file is generated
/* eslint-disable max-len */

import { takeEvery, takeLatest } from 'redux-saga';
import { call, put } from 'redux-saga/effects';
import * as request from 'superagent';

function api({
  key1,
  key2,
  firstName,
  lastName = undefined } = {}) {

  const queryData = Object.assign(
    firstName ? { firstName } : {},
    lastName ? { lastName } : {}
  );

  return request
    .get(`todos/${key1}/${key2}`)
    .query(queryData);
}

const actionTypes = {
  getTodosByKey1AndKey2_get: 'getTodosByKey1AndKey2/get',
  getTodosByKey1AndKey2_doing: 'getTodosByKey1AndKey2/doing',
  getTodosByKey1AndKey2_success: 'getTodosByKey1AndKey2/success',
  getTodosByKey1AndKey2_failure: 'getTodosByKey1AndKey2/failure',
};

const actions = {
  /**
   * All the things
   * @param {string} key1 - the first key
   * @param {integer} key2 - the second key
   * @param {string} firstName - first comes before last
   * @param {string=} lastName - last name (Optional)
   */
  getTodosByKey1AndKey2_get: ({
    key1,
    key2,
    firstName,
    lastName = undefined } = {}) => ({
    type: actionTypes.getTodosByKey1AndKey2_get,
    payload: {
      key1,
      key2,
      firstName,
      lastName
    },
  }),
  getTodosByKey1AndKey2_doing: () => ({
    type: actionTypes.getTodosByKey1AndKey2_doing,
  }),
  getTodosByKey1AndKey2_success: (result) => ({
    type: actionTypes.getTodosByKey1AndKey2_success,
    payload: result,
  }),
  getTodosByKey1AndKey2_failure: (err) => ({
    type: actionTypes.getTodosByKey1AndKey2_failure,
    payload: err,
    error: true,
  }),
};

function* saga(action) {
  try {
    yield put(actions.getTodosByKey1AndKey2_doing());
    const { body } = yield call(api, action.payload);
    yield put(actions.getTodosByKey1AndKey2_success(body));
  } catch (error) {
    yield put(actions.getTodosByKey1AndKey2_failure(error));
  }
}

/**
 * Start this saga if you'd prefer to process every action
 */
function* takeEverySaga() {
  yield* takeEvery(actionTypes.getTodosByKey1AndKey2_get, saga);
}

/**
 * Start this saga if you'd prefer to process only the latest action
 */
function* takeLatestSaga() {
  yield* takeLatest(actionTypes.getTodosByKey1AndKey2_get, saga);
}

export {
  actions,
  actionTypes,
  api,
  saga,
  takeEverySaga,
  takeLatestSaga,
};
